john,male,?
cv = [(0,0),(1,1),(2,1),(0,2),(1,2),(2,2)]
hash(john) = 001001
hash(male) = 101101
hash(?)

known   = 010001
unknown = 100100

known 可能性， 根据unknown来进行判断：
010001          最小的情况       known
010101
110001
110101          最大的情况       known | unknown

known:   01100100
unknown: 10010010


#############################
pid is :    37
preTupleLen:  688
curTupleIndex:  35
total tuple is:  36
00000000 00000000 00000000 00100101
#############################
2958,train,boss
#############################
pid is :    37
preTupleLen:  689
curTupleIndex:  36
total tuple is:  36

1835,knife,fin


find out overflow

            printf("#############################\n");
            if(pageOvflow(curPage)) {
                Offset ovp = pageOvflow(curPage);
                int pid1;
                if (depth(q->rel) == 0) {
                    pid1 = 0;
                } else {
                    pid1 = getLower(ovp, depth(q->rel)-1);
                    //printf("depth is %d\n", depth(q->rel));/**/
//            printf("split is : %d\n", splitp(q->rel));
                    if (pid1 < splitp(q->rel)) pid1 = getLower(ovp, depth(q->rel)-1);
                }
                printf("has Overflow\n");/**/
                printBits(pid1);
                Page ovpg = getPage(ovflowFile(r), pid1);
                printf("ovp is %u\n",ovp);
                Count ntups = pageNTuples(ovpg);
                printf("ntups: %d\n", ntups);
//                if(ovp != NO_PAGE) {
                char *ovpd = pageData(ovpg);
                printf("has Overflow\n");
                printf("ovpd0: %s\n", ovpd);
                printf("ovpd1: %s\n", ovpd+ strlen(ovpd)+1);
            }